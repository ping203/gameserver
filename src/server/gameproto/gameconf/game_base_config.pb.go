// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gameconf/game_base_config.proto

/*
Package gameconf is a generated protocol buffer package.

It is generated from these files:
	gameconf/game_base_config.proto
	gameconf/game_type.proto

It has these top-level messages:
	GameBaseConfig
	SkillEffect
	SkillConfDefine
	SkillEffectConfDefine
	Learn
	GeneralConfDefine
	DoNotUseThis
	DoNotUseThisDefine
*/
package gameconf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Defined in table: GameBaseConfig
type GameBaseConfig struct {
	DoNotUseThis    []*DoNotUseThisDefine    `protobuf:"bytes,1,rep,name=DoNotUseThis" json:"DoNotUseThis,omitempty"`
	SkillConf       []*SkillConfDefine       `protobuf:"bytes,2,rep,name=SkillConf" json:"SkillConf,omitempty"`
	SkillEffectConf []*SkillEffectConfDefine `protobuf:"bytes,3,rep,name=SkillEffectConf" json:"SkillEffectConf,omitempty"`
	GeneralConf     []*GeneralConfDefine     `protobuf:"bytes,4,rep,name=GeneralConf" json:"GeneralConf,omitempty"`
}

func (m *GameBaseConfig) Reset()                    { *m = GameBaseConfig{} }
func (m *GameBaseConfig) String() string            { return proto.CompactTextString(m) }
func (*GameBaseConfig) ProtoMessage()               {}
func (*GameBaseConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GameBaseConfig) GetDoNotUseThis() []*DoNotUseThisDefine {
	if m != nil {
		return m.DoNotUseThis
	}
	return nil
}

func (m *GameBaseConfig) GetSkillConf() []*SkillConfDefine {
	if m != nil {
		return m.SkillConf
	}
	return nil
}

func (m *GameBaseConfig) GetSkillEffectConf() []*SkillEffectConfDefine {
	if m != nil {
		return m.SkillEffectConf
	}
	return nil
}

func (m *GameBaseConfig) GetGeneralConf() []*GeneralConfDefine {
	if m != nil {
		return m.GeneralConf
	}
	return nil
}

// Defined in table: SkillConf
type SkillEffect struct {
	// 效果对象
	Object SkillEffectObjectTyp `protobuf:"varint,1,opt,name=Object,enum=gameconf.SkillEffectObjectTyp" json:"Object,omitempty"`
	// 最短持续时间
	Min int32 `protobuf:"varint,2,opt,name=Min" json:"Min,omitempty"`
	// 最长持续时间
	Max int32 `protobuf:"varint,3,opt,name=Max" json:"Max,omitempty"`
	// 触发概率
	Chance uint32 `protobuf:"varint,4,opt,name=Chance" json:"Chance,omitempty"`
	// 等级
	Power uint32 `protobuf:"varint,5,opt,name=Power" json:"Power,omitempty"`
	// 效果ID
	Id uint32 `protobuf:"varint,6,opt,name=Id" json:"Id,omitempty"`
}

func (m *SkillEffect) Reset()                    { *m = SkillEffect{} }
func (m *SkillEffect) String() string            { return proto.CompactTextString(m) }
func (*SkillEffect) ProtoMessage()               {}
func (*SkillEffect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SkillEffect) GetObject() SkillEffectObjectTyp {
	if m != nil {
		return m.Object
	}
	return SkillEffectObjectTyp_SEOTInvalid
}

func (m *SkillEffect) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *SkillEffect) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *SkillEffect) GetChance() uint32 {
	if m != nil {
		return m.Chance
	}
	return 0
}

func (m *SkillEffect) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *SkillEffect) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Defined in table: SkillConf
type SkillConfDefine struct {
	SkillID         uint32         `protobuf:"varint,1,opt,name=SkillID" json:"SkillID,omitempty"`
	SkillName       string         `protobuf:"bytes,2,opt,name=SkillName" json:"SkillName,omitempty"`
	SkillType       SkillTyp       `protobuf:"varint,3,opt,name=SkillType,enum=gameconf.SkillTyp" json:"SkillType,omitempty"`
	SkillAttackType SkillAttackTyp `protobuf:"varint,4,opt,name=SkillAttackType,enum=gameconf.SkillAttackTyp" json:"SkillAttackType,omitempty"`
	Power           uint32         `protobuf:"varint,5,opt,name=Power" json:"Power,omitempty"`
	Effect          []*SkillEffect `protobuf:"bytes,6,rep,name=Effect" json:"Effect,omitempty"`
}

func (m *SkillConfDefine) Reset()                    { *m = SkillConfDefine{} }
func (m *SkillConfDefine) String() string            { return proto.CompactTextString(m) }
func (*SkillConfDefine) ProtoMessage()               {}
func (*SkillConfDefine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SkillConfDefine) GetSkillID() uint32 {
	if m != nil {
		return m.SkillID
	}
	return 0
}

func (m *SkillConfDefine) GetSkillName() string {
	if m != nil {
		return m.SkillName
	}
	return ""
}

func (m *SkillConfDefine) GetSkillType() SkillTyp {
	if m != nil {
		return m.SkillType
	}
	return SkillTyp_STInvalid
}

func (m *SkillConfDefine) GetSkillAttackType() SkillAttackTyp {
	if m != nil {
		return m.SkillAttackType
	}
	return SkillAttackTyp_SATInvliad
}

func (m *SkillConfDefine) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *SkillConfDefine) GetEffect() []*SkillEffect {
	if m != nil {
		return m.Effect
	}
	return nil
}

// Defined in table: SkillEffectConf
type SkillEffectConfDefine struct {
	SkillEffectID   uint32         `protobuf:"varint,1,opt,name=SkillEffectID" json:"SkillEffectID,omitempty"`
	SkillName       string         `protobuf:"bytes,2,opt,name=SkillName" json:"SkillName,omitempty"`
	SkillEffectType SkillEffectTyp `protobuf:"varint,3,opt,name=SkillEffectType,enum=gameconf.SkillEffectTyp" json:"SkillEffectType,omitempty"`
}

func (m *SkillEffectConfDefine) Reset()                    { *m = SkillEffectConfDefine{} }
func (m *SkillEffectConfDefine) String() string            { return proto.CompactTextString(m) }
func (*SkillEffectConfDefine) ProtoMessage()               {}
func (*SkillEffectConfDefine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SkillEffectConfDefine) GetSkillEffectID() uint32 {
	if m != nil {
		return m.SkillEffectID
	}
	return 0
}

func (m *SkillEffectConfDefine) GetSkillName() string {
	if m != nil {
		return m.SkillName
	}
	return ""
}

func (m *SkillEffectConfDefine) GetSkillEffectType() SkillEffectTyp {
	if m != nil {
		return m.SkillEffectType
	}
	return SkillEffectTyp_SETInvliad
}

// Defined in table: GeneralConf
type Learn struct {
	// 等级
	Level uint32 `protobuf:"varint,1,opt,name=Level" json:"Level,omitempty"`
	// 技能
	SkillID uint32 `protobuf:"varint,2,opt,name=SkillID" json:"SkillID,omitempty"`
}

func (m *Learn) Reset()                    { *m = Learn{} }
func (m *Learn) String() string            { return proto.CompactTextString(m) }
func (*Learn) ProtoMessage()               {}
func (*Learn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Learn) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Learn) GetSkillID() uint32 {
	if m != nil {
		return m.SkillID
	}
	return 0
}

// Defined in table: GeneralConf
type GeneralConfDefine struct {
	GeneralID   uint32   `protobuf:"varint,1,opt,name=GeneralID" json:"GeneralID,omitempty"`
	GeneralName string   `protobuf:"bytes,2,opt,name=GeneralName" json:"GeneralName,omitempty"`
	Hp          int32    `protobuf:"varint,3,opt,name=Hp" json:"Hp,omitempty"`
	Atk         int32    `protobuf:"varint,4,opt,name=Atk" json:"Atk,omitempty"`
	Def         int32    `protobuf:"varint,5,opt,name=Def" json:"Def,omitempty"`
	Satk        int32    `protobuf:"varint,6,opt,name=Satk" json:"Satk,omitempty"`
	Sdef        int32    `protobuf:"varint,7,opt,name=Sdef" json:"Sdef,omitempty"`
	Spd         int32    `protobuf:"varint,8,opt,name=Spd" json:"Spd,omitempty"`
	LearnSkills []*Learn `protobuf:"bytes,9,rep,name=LearnSkills" json:"LearnSkills,omitempty"`
	BaseSkills  []uint32 `protobuf:"varint,10,rep,packed,name=BaseSkills" json:"BaseSkills,omitempty"`
}

func (m *GeneralConfDefine) Reset()                    { *m = GeneralConfDefine{} }
func (m *GeneralConfDefine) String() string            { return proto.CompactTextString(m) }
func (*GeneralConfDefine) ProtoMessage()               {}
func (*GeneralConfDefine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GeneralConfDefine) GetGeneralID() uint32 {
	if m != nil {
		return m.GeneralID
	}
	return 0
}

func (m *GeneralConfDefine) GetGeneralName() string {
	if m != nil {
		return m.GeneralName
	}
	return ""
}

func (m *GeneralConfDefine) GetHp() int32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *GeneralConfDefine) GetAtk() int32 {
	if m != nil {
		return m.Atk
	}
	return 0
}

func (m *GeneralConfDefine) GetDef() int32 {
	if m != nil {
		return m.Def
	}
	return 0
}

func (m *GeneralConfDefine) GetSatk() int32 {
	if m != nil {
		return m.Satk
	}
	return 0
}

func (m *GeneralConfDefine) GetSdef() int32 {
	if m != nil {
		return m.Sdef
	}
	return 0
}

func (m *GeneralConfDefine) GetSpd() int32 {
	if m != nil {
		return m.Spd
	}
	return 0
}

func (m *GeneralConfDefine) GetLearnSkills() []*Learn {
	if m != nil {
		return m.LearnSkills
	}
	return nil
}

func (m *GeneralConfDefine) GetBaseSkills() []uint32 {
	if m != nil {
		return m.BaseSkills
	}
	return nil
}

func init() {
	proto.RegisterType((*GameBaseConfig)(nil), "gameconf.GameBaseConfig")
	proto.RegisterType((*SkillEffect)(nil), "gameconf.SkillEffect")
	proto.RegisterType((*SkillConfDefine)(nil), "gameconf.SkillConfDefine")
	proto.RegisterType((*SkillEffectConfDefine)(nil), "gameconf.SkillEffectConfDefine")
	proto.RegisterType((*Learn)(nil), "gameconf.Learn")
	proto.RegisterType((*GeneralConfDefine)(nil), "gameconf.GeneralConfDefine")
}

func init() { proto.RegisterFile("gameconf/game_base_config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x9d, 0xd8, 0x6d, 0x27, 0x24, 0x85, 0x15, 0x45, 0x0b, 0x54, 0xad, 0x65, 0x71, 0xc8,
	0x85, 0x00, 0x41, 0xa2, 0x27, 0x24, 0x9a, 0x06, 0xb5, 0x91, 0x4a, 0x41, 0x9b, 0x70, 0xae, 0x36,
	0xf1, 0xb8, 0x0d, 0x49, 0x6c, 0x2b, 0xb1, 0xa0, 0xb9, 0xf3, 0x09, 0x70, 0xe6, 0xc8, 0x6f, 0xa2,
	0x1d, 0x6f, 0xb2, 0x1b, 0x13, 0xc4, 0x6d, 0xe7, 0xcd, 0x7b, 0xe3, 0x79, 0x33, 0x23, 0xc3, 0xf1,
	0x8d, 0x9c, 0xe1, 0x28, 0x4d, 0xe2, 0x17, 0xea, 0x71, 0x3d, 0x94, 0x0b, 0xbc, 0x56, 0xe1, 0xf8,
	0xa6, 0x95, 0xcd, 0xd3, 0x3c, 0x65, 0xbb, 0x2b, 0xc2, 0x13, 0xbe, 0x49, 0xcd, 0x97, 0x19, 0x16,
	0x9c, 0xf0, 0xa7, 0x0b, 0x8d, 0x73, 0x39, 0xc3, 0x8e, 0x5c, 0xe0, 0x19, 0x89, 0xd9, 0x3b, 0xb8,
	0xd7, 0x4d, 0xaf, 0xd2, 0xfc, 0xf3, 0x02, 0x07, 0xb7, 0xe3, 0x05, 0x77, 0x82, 0x4a, 0xb3, 0xd6,
	0x3e, 0x6c, 0xad, 0x6a, 0xb4, 0xec, 0x6c, 0x17, 0xe3, 0x71, 0x82, 0x62, 0x43, 0xc1, 0x4e, 0x60,
	0xaf, 0x3f, 0x19, 0x4f, 0xa7, 0xaa, 0x20, 0x77, 0x49, 0xfe, 0xd8, 0xc8, 0xd7, 0x29, 0xad, 0x35,
	0x5c, 0xd6, 0x83, 0x7d, 0x0a, 0xde, 0xc7, 0x31, 0x8e, 0x72, 0x92, 0x57, 0x48, 0x7e, 0x5c, 0x92,
	0x1b, 0x82, 0x2e, 0x52, 0xd6, 0xb1, 0xb7, 0x50, 0x3b, 0xc7, 0x04, 0xe7, 0xb2, 0xe8, 0xa2, 0x4a,
	0x65, 0x9e, 0x9a, 0x32, 0x56, 0x52, 0x97, 0xb0, 0xf9, 0xe1, 0x6f, 0x07, 0x6a, 0x56, 0x49, 0xf6,
	0x06, 0xfc, 0x8f, 0xc3, 0x2f, 0x38, 0xca, 0xb9, 0x13, 0x38, 0xcd, 0x46, 0xfb, 0x68, 0x6b, 0x43,
	0x05, 0x65, 0xb0, 0xcc, 0x84, 0x66, 0xb3, 0xfb, 0x50, 0xf9, 0x30, 0x4e, 0xb8, 0x1b, 0x38, 0x4d,
	0x4f, 0xa8, 0x27, 0x21, 0xf2, 0x8e, 0x57, 0x34, 0x22, 0xef, 0xd8, 0x23, 0xf0, 0xcf, 0x6e, 0x65,
	0x32, 0x42, 0x5e, 0x0d, 0x9c, 0x66, 0x5d, 0xe8, 0x88, 0x3d, 0x04, 0xef, 0x53, 0xfa, 0x0d, 0xe7,
	0xdc, 0x23, 0xb8, 0x08, 0x58, 0x03, 0xdc, 0x5e, 0xc4, 0x7d, 0x82, 0xdc, 0x5e, 0x14, 0x7e, 0x77,
	0xf5, 0xd0, 0x8c, 0x15, 0xc6, 0x61, 0x87, 0xa0, 0x5e, 0x97, 0xda, 0xad, 0x8b, 0x55, 0xc8, 0x0e,
	0xf5, 0x6a, 0xae, 0xe4, 0x0c, 0xa9, 0xab, 0x3d, 0x61, 0x00, 0xf6, 0x52, 0x67, 0x07, 0xcb, 0x0c,
	0xa9, 0xc3, 0x46, 0x9b, 0x95, 0x8c, 0x2a, 0x73, 0x86, 0xc4, 0x3a, 0xfa, 0xe3, 0xa7, 0x79, 0x2e,
	0x47, 0x13, 0xd2, 0x55, 0x49, 0xc7, 0x4b, 0xba, 0x35, 0x41, 0x94, 0x05, 0xff, 0xf0, 0xf9, 0x1c,
	0xfc, 0x62, 0xa8, 0xdc, 0xa7, 0xdd, 0x1d, 0x6c, 0x9d, 0xb8, 0xd0, 0xa4, 0xf0, 0x97, 0x03, 0x07,
	0x5b, 0x4f, 0x83, 0x3d, 0x83, 0xba, 0x95, 0x58, 0x8f, 0x64, 0x13, 0xfc, 0xcf, 0x60, 0x3a, 0x1b,
	0x87, 0x69, 0x8d, 0x87, 0x6f, 0xed, 0xca, 0xd8, 0x34, 0x82, 0xf0, 0x04, 0xbc, 0x4b, 0x94, 0xf3,
	0x44, 0xf9, 0xbd, 0xc4, 0xaf, 0x38, 0xd5, 0x8d, 0x14, 0x81, 0xbd, 0x33, 0x77, 0x63, 0x67, 0xe1,
	0x0f, 0x17, 0x1e, 0xfc, 0x75, 0xae, 0xaa, 0x61, 0x0d, 0xae, 0x2d, 0x19, 0x80, 0x05, 0xeb, 0xf3,
	0xb7, 0x0c, 0xd9, 0x90, 0xba, 0xa3, 0x8b, 0x4c, 0x9f, 0xa1, 0x7b, 0x91, 0xa9, 0xbb, 0x3c, 0xcd,
	0x27, 0xb4, 0x3d, 0x4f, 0xa8, 0xa7, 0x42, 0xba, 0x18, 0xd3, 0x56, 0x3c, 0xa1, 0x9e, 0x8c, 0x41,
	0xb5, 0x2f, 0xf3, 0x09, 0x5d, 0x9f, 0x27, 0xe8, 0x4d, 0x58, 0x84, 0x31, 0xdf, 0xd1, 0x58, 0x84,
	0xb1, 0x52, 0xf6, 0xb3, 0x88, 0xef, 0x16, 0xca, 0x7e, 0x16, 0xb1, 0x57, 0x50, 0x23, 0xf3, 0xe4,
	0x69, 0xc1, 0xf7, 0x68, 0xa5, 0xfb, 0x66, 0x78, 0x94, 0x14, 0x36, 0x87, 0x1d, 0x01, 0xa8, 0xbf,
	0x92, 0x56, 0x40, 0x50, 0x69, 0xd6, 0x85, 0x85, 0x0c, 0x7d, 0xfa, 0x83, 0xbd, 0xfe, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xf4, 0xb8, 0x2a, 0xba, 0x08, 0x05, 0x00, 0x00,
}
